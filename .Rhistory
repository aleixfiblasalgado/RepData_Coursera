library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
DOC
doc
fileUrl <- "http://grupotragaluz.com/restaurante/negro-rojo/"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
rootNode
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[3]]
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[3]]
xmlSApply(rootNode, xmlvalue)
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
library(curl)
library("curl")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos", method = curl)
install.packages("curl")
library(curl)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos", method = curl)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
View(jsonData)
names(jsonData$owner$login)
names(jsonData$owner.login)
names(jsonData$owner.url)
jsonData$owner$login
library(XML)
fileUrl <- "http://restauranteeltrapio.com/cartas-y-menus/"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
info <- xpathSApply(doc, "//li@class='custom_scroll'", xmlValue)
info <- xpathSApply(doc, "//li[@class='custom_scroll']", xmlValue)
info
info <- xpathSApply(doc, "//li[@class='center']", xmlValue)
info <- xpathSApply(doc, "//li[@class='price']", xmlValue)
info
info <- xpathSApply(doc, "//li[@class='p']", xmlValue)
info
info <- xpathSApply(doc, "//li[@class='entry-content']", xmlValue)
info
str(scan)
x <- scan(n = 1, quiet = TRUE, comment.char = "hora")
x <- scan(n = 1, quiet = TRUE, comment.char = "hello")
x <- scan(n = 1, quiet = TRUE)
rm(x)
x <- scan()
x <- scan()
list.packages()
list.package()
2+5+6
9+8+7+
6
6
6
7
8+7
67+675
cat("Hola")
cat(2)
hola
scan()
67+675
67+675
??cor
??cor
?cor
library(swirl)
swirl()
my_vector <- 1:20
my_vector
m <- matrix(c(1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0), nrow = 4)
m
solve(m)
m1 <- matrix(c(200, 40,70, 200), nrow = 4)
m%*%m1
m1
m*m1
m1
m
m <- solve(m)
m*m1
m%*%m1
m
m <- solve(m)
m
m <- matrix(c(1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0), nrow = 4)
m <- solve(m)
m
m%*%m1
N <- matrix(c(2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), nrow = 4)
c <- matrx(c(0, 0.09, 0.05, 0), nrow = 1)
c <- matrix(c(0, 0.09, 0.05, 0), nrow = 1)
m
c%*%m%*%n
c%*%m%*%N
m <- matrix(c(1, 3, 1, 2, 0, 4, 1, 2, 0), nrow = 3)
m
m <- solve(m)
m
c <- matrix(c(3, 2, 5), nrow = 1)
c
m%*%c
m
c
c%*%m
B <- matrix(c(2, 3, 1, 0), nrow = 2)
B <- solve(B)
B
c <- matrix(c(-1, 2), nrow = 1)
N <- matrix(c(-1, 0, 0, -1, 1, 0, 0, 1), nrow = 2)
B%/
c%/%B%/%N
c
c%*%B%*%N
solve(B)
B <- matrix(c(2, 0, 4, 1, 2, 0, 0, 0, 1), nrow = 3)
B
B <- solve(B)
B
N <- matrix(c(1, 3, 1, 1, 0, 0, 0, 1, 0), nrow = 3)
c <- matrix(c(2, -5, 0), nrow = 1)
c%*%B%*%N
c <- matrix(c(2, 5, 0), nrow = 1)
c%*%B%*%N
16/5 + 13
68/12
((16/5) + 13)/(32/12 + 3)
((16/5) + 13)/(32/15 + 3)
load("~/EUS/2n SEMESTRE/Econometrics/DataSets_Wooldridge/R data sets for Introductoy Econometrics/ceosal1.RData")
View(desc)
View(data)
R <- c(0, 1, 1, 1)
beta <- c(-1,747909, 0,367761)
beta <- c(-1,747909, 0,367761, 0,660816)
1er <- (R*beta-1)
prer <- (R*beta-1)
R <- c(0, 1, 1)
prer <- (R*beta-1)
prer
tras(beta)
beta <- t(beta)
R*beat
R*beta
R%*%beta
R
beta
R <- matrix(0, 1, 1, nrow= 1)
beta <- matrix(-1.74, 0.367, 0.6608, nrow = 3)
r <- matrix(1, nrow = 1)
R%*%beta
R*beta
View(beta)
beta
R
beta <- matrix(-1.74, 0.367, 0.6608, nrow = 3)
beta
R <- matrix(c(0, 1, 1), nrow= 1)
R
beta <- matrix(c(-1.74, 0.367, 0.6608), nrow = 3)
beta
R%*%beta
primer_terme <- R%*%beta - -1
primer_terme <- R%*%beta - 1
var_beta <- matrix(c(0.27, 0.018, -0.052, 0.018, 0.0128, -0.01, -0.052, -0.01, 0.015), nrow = 3)
var_beta
var_beta <- matrix(c(0.27, 0.018, -0.052, 0.018, 0.0128, -0.0109, -0.052, -0.01, 0.015), nrow = 3)
inv(var_beta)
termino_segundo <- R%*%var_beta%*%t(R)
termino_segundo
termino_segundo <- solve(R%*%var_beta%*%t(R))
termino_segundo
tercer_terme <- R%*%beta - 1
tercer_terme
tercer_terme*termino_segundo*primer_terme
beta <- matrix(c(-1.5851, 0.3588, 0.64114), nrow = 3)
R
beta
R%*%beta - 1
primer_terme <- R%*%beta - 1
termino_segundo <- solve(R%*%var_beta%*%t(R))
x <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3)
x
solve(x)
library(xts)
load("~/FinancialAnalysis-CliffordS.Ang/Unit 1 Prices/FA.RData")
?rnorm
ichi <- "marise"
ichi <- "guapa"
guapa
ichi
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
View(spam)
str(spam[ ,1:5])
?set.seed
set.seed(3435)
trainIndicator <- rbinom(4601, size=1, prob=0.5)
trainIndicator
table(trainIndicator)
trainSpam <- spam[trainIndicator==1, ]
View(trainSpam)
testSpam <- spam[trainIndicator==0, ]
View(trainSpam)
names(trainSpam)
View(spam)
head(trainSpam)
table(trainSpam$type)
View(spam)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
?spam
View(spam)
plot(log10(trainSpam[, 1:4] + 1))
View(trainSpam)
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
trainSpam$numType <- as.numeric(trainSpam$type) - 1
View(trainSpam)
costFunction <- function(x, y) sum(x != (y > 0.5))
cvError <- rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula <- reformulate(names(trainSpam)[i], response="numType")
glmFit <- glm(lmFormula, family="binomial", data=trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
trainSpam$numType <- as.numeric(trainSpam$type) - 1
costFunction <- function(x, y) sum(x != (y > 0.5))
cvError <- rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula <- reformulate(names(trainSpam)[i], response="numType")
glmFit <- glm(lmFormula, family="binomial", data=trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel <- glm(numType ~ charDollar, family="binomial", data=trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictedSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] <- "spam"
table(predictedSpam, testSpam$type)
rm(list = ls())
library(kernlab)
version()
r()
??version
?version
R.Version()
install.packages("installr")
R.Version()
R.Version()
library(kernlab)
setwd("~/JHU/Reproducible_Research/RepData_Coursera")
