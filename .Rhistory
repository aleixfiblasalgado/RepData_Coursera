```
Here is a table of the regression coefficients.
```{r showtable, results = "asis"}
library(xtable)
xt <- xtable(summary(fit))
print(xt, type = "html")
```
fit <- lm(Ozone ~ Wind + Temp + Solar.R, data = airquality)
library(datasets)
data(airquality)
fit <- lm(Ozone ~ Wind + Temp + Solar.R, data = airquality)
library(datasets)
data(airquality)
fit <- lm(Ozone ~ Wind + Temp + Solar.R, data = airquality)
setwd("~/JHU/Reproducible_Research/RepData_Coursera")
??read.csv
?read.csv
rm(list = ls())
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
View(data)
data <- read.csv("activity.csv", sep = ";")
View(data)
data <- read.csv("activity.csv", sep = ",")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN = sum, na.rm = TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500',
binwidth=500)
qplot(total.steps, xlab='Total steps per day', ylab='Frequency using binwith 500',
binwidth=500)
View(data)
hist(total.steps)
library(data.table)
install.packages("data.table")
rdata <- read.csv('activity.csv', header = TRUE, sep = ",",
colClasses=c("numeric", "character", "numeric"))
rdata$date <- as.Date(rdata$date, format = "%Y-%m-%d")
rdata$interval <- as.factor(rdata$interval)
str(rdata)
steps_per_day <- aggregate(steps ~ date, rdata, sum)
colnames(steps_per_day) <- c("date","steps")
head(steps_per_day)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "green", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)") + theme_bw()
steps_per_day <- agrregate(steps~date, data, sum)
steps_per_day <- aggregate(steps~date, data, sum)
View(steps_per_day)
library(ggplot2)
library(data.table)
steps_per_day <- aggregate(steps~date, data, sum)
colnames(steps_per_day) <- c("date", "steps")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
View(steps_per_day)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
View(steps_per_day)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
rm(rdata)
rdata <
-data
rdata <- data
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers
##this helps in plotting
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
View(rdata)
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers
##this helps in plotting
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
View(steps_per_interval)
View(averages)
rm(list = ls())
## 2nd STEP: HISTOGRAM OF THE NUMBER OF STEPS EACH DAY
library(ggplot2)
library(data.table)
steps_per_day <- aggregate(steps~date, data, sum)
colnames(steps_per_day) <- c("date", "steps")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
## 3rd STEP: Mean and median number of steps taken each day
stepsmean <- mean(steps_per_day, na.rm = TRUE)
stepsmedian <- median(steps_per_day, na.rm = TRUE)
## Time series plot of the average number of stpes taken
averages <- aggregate(data$steps, by = list(interval = data$interval),
FUN = mean, na.rm = TRUE)
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv", sep = ",")
## 2nd STEP: HISTOGRAM OF THE NUMBER OF STEPS EACH DAY
library(ggplot2)
library(data.table)
steps_per_day <- aggregate(steps~date, data, sum)
colnames(steps_per_day) <- c("date", "steps")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
## 3rd STEP: Mean and median number of steps taken each day
stepsmean <- mean(steps_per_day, na.rm = TRUE)
stepsmedian <- median(steps_per_day, na.rm = TRUE)
## Time series plot of the average number of stpes taken
averages <- aggregate(data$steps, by = list(interval = data$interval),
FUN = mean, na.rm = TRUE)
View(averages)
colnames(averages) <- c("interval", "av.steps")
ggplot(averages, aes(x = interval, y = steps)) +
geom_line(color = "darkblue", size = 1) +
labs(title = "Average Daily Activity Pattern", x = "5 sec Interval",
y = "# of Steps") + theme_bw()
ggplot(averages, aes(x = interval, y = av.steps)) +
geom_line(color = "darkblue", size = 1) +
labs(title = "Average Daily Activity Pattern", x = "5 sec Interval",
y = "# of Steps") + theme_bw()
?which.max
averages[which.max(averages$steps)]
averages[which.max(averages$steps), ]
averages[which.max(averages$av.steps), ]
View(averages)
missing <- is.na(data$steps)
table(missing)
na_fill <- function(data, pervalue) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN = function(idx){
interval = data[idx, ]$interval
pervalue[pervalue$interval == interval, ]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
data_fill <- data.frame(steps = na_fill(data, averages),
date = data$date,
interval = data$interval)
str(data_fill)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
View(filled.data)
na_fill <- function(data, pervalue) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
pervalue[pervalue$interval == interval,]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
data_fill <- data.frame(
steps = na_fill(data, averages),
date = data$date,
interval = data$interval)
str(data_fill)
na_fill <- function(data, pervalue) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
pervalue[pervalue$interval == interval,]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
data_fill <- data.frame(
steps = na_fill(data, averages),
date = data$date,
interval = data$interval)
rm(list = ls())
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
library(data.table)
library(ggplot2) # we shall use ggplot2 for plotting figures
rdata <- read.csv('activity.csv', header = TRUE, sep = ",",
colClasses=c("numeric", "character", "numeric"))
rdata$date <- as.Date(rdata$date, format = "%Y-%m-%d")
rdata$interval <- as.factor(rdata$interval)
str(rdata)
steps_per_day <- aggregate(steps ~ date, rdata, sum)
colnames(steps_per_day) <- c("date","steps")
head(steps_per_day)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "green", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)") + theme_bw()
steps_mean   <- mean(steps_per_day$steps, na.rm=TRUE)
steps_median <- median(steps_per_day$steps, na.rm=TRUE)
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers
##this helps in plotting
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
max_interval <- steps_per_interval[which.max(
steps_per_interval$steps),]
missing_vals <- sum(is.na(rdata$steps))
na_fill <- function(data, pervalue) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
pervalue[pervalue$interval == interval,]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
rdata_fill <- data.frame(
steps = na_fill(rdata, steps_per_interval),
date = rdata$date,
interval = rdata$interval)
str(rdata_fill)
sum(is.na(rdata_fill$steps))
}))
## 1st STEP: LOAD DATA
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv", sep = ",")
## 2nd STEP: HISTOGRAM OF THE NUMBER OF STEPS EACH DAY
library(ggplot2)
library(data.table)
steps_per_day <- aggregate(steps~date, data, sum)
colnames(steps_per_day) <- c("date", "steps")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
## 3rd STEP: Mean and median number of steps taken each day
stepsmean <- mean(steps_per_day, na.rm = TRUE)
stepsmedian <- median(steps_per_day, na.rm = TRUE)
## 4th STEP: Time series plot of the average number of stpes taken
averages <- aggregate(data$steps, by = list(interval = data$interval),
FUN = mean, na.rm = TRUE)
colnames(averages) <- c("interval", "av.steps")
ggplot(averages, aes(x = interval, y = av.steps)) +
geom_line(color = "darkblue", size = 1) +
labs(title = "Average Daily Activity Pattern", x = "5 sec Interval",
y = "# of Steps") + theme_bw()
## 5th STEP: 5-minute interval with the max average of steps
averages[which.max(averages$av.steps), ]
## 6th STEP: IMPUTING MISSING DATA
missing <- is.na(data$steps)
table(missing)
## STRATEGY: Replace them with the mean value at the same interval across the
## whole time period.
na_fill <- function(data, pervalue) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
pervalue[pervalue$interval == interval,]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
data_fill <- data.frame(
steps = na_fill(data, averages),
date = data$date,
interval = data$interval)
str(data_fill)
na_fill <- function(data, averages) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
averages[averages$interval == interval,]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
data_fill <- data.frame(
steps = na_fill(data, averages),
date = data$date,
interval = data$interval)
str(data_fill)
rm(list = ls())
## 1st STEP: LOAD DATA
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv", sep = ",")
## 2nd STEP: HISTOGRAM OF THE NUMBER OF STEPS EACH DAY
library(ggplot2)
library(data.table)
steps_per_day <- aggregate(steps~date, data, sum)
colnames(steps_per_day) <- c("date", "steps")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
## 3rd STEP: Mean and median number of steps taken each day
stepsmean <- mean(steps_per_day, na.rm = TRUE)
stepsmedian <- median(steps_per_day, na.rm = TRUE)
## 4th STEP: Time series plot of the average number of stpes taken
averages <- aggregate(data$steps, by = list(interval = data$interval),
FUN = mean, na.rm = TRUE)
averages$interval <- as.integer(levels(averages$interval)[averages$interval])
colnames(averages) <- c("interval", "av.steps")
ggplot(averages, aes(x = interval, y = av.steps)) +
geom_line(color = "darkblue", size = 1) +
labs(title = "Average Daily Activity Pattern", x = "5 sec Interval",
y = "# of Steps") + theme_bw()
## 5th STEP: 5-minute interval with the max average of steps
averages[which.max(averages$av.steps), ]
## 6th STEP: IMPUTING MISSING DATA
missing <- is.na(data$steps)
table(missing)
rm(list = ls())
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv", sep = ",")
## 2nd STEP: HISTOGRAM OF THE NUMBER OF STEPS EACH DAY
library(ggplot2)
library(data.table)
steps_per_day <- aggregate(steps~date, data, sum)
colnames(steps_per_day) <- c("date", "steps")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
## 3rd STEP: Mean and median number of steps taken each day
stepsmean <- mean(steps_per_day$steps, na.rm = TRUE)
stepsmedian <- median(steps_per_day$steps, na.rm = TRUE)
averages <- aggregate(data$steps, by = list(interval = data$interval),
FUN = mean, na.rm = TRUE)
averages$interval <- as.integer(levels(averages$interval)[averages$interval])
View(averages)
averages <- aggregate(data$steps, by = list(interval = data$interval),
FUN = mean, na.rm = TRUE)
colnames(averages) <- c("interval", "av.steps")
ggplot(averages, aes(x = interval, y = av.steps)) +
geom_line(color = "darkblue", size = 1) +
labs(title = "Average Daily Activity Pattern", x = "5 sec Interval",
y = "# of Steps") + theme_bw()
ill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
View(ill.value)
rm(ill.value())
rm(ill.value)
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
View(filled.data)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
View(filled.data)
## 1st STEP: LOAD DATA
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv", sep = ",")
## 2nd STEP: HISTOGRAM OF THE NUMBER OF STEPS EACH DAY
library(ggplot2)
library(data.table)
steps_per_day <- aggregate(steps~date, data, sum)
colnames(steps_per_day) <- c("date", "steps")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
## 3rd STEP: Mean and median number of steps taken each day
stepsmean <- mean(steps_per_day$steps, na.rm = TRUE)
stepsmedian <- median(steps_per_day$steps, na.rm = TRUE)
## 4th STEP: Time series plot of the average number of stpes taken
averages <- aggregate(data$steps, by = list(interval = data$interval),
FUN = mean, na.rm = TRUE)
colnames(averages) <- c("interval", "steps")
ggplot(averages, aes(x = interval, y = steps)) +
geom_line(color = "darkblue", size = 1) +
labs(title = "Average Daily Activity Pattern", x = "5 sec Interval",
y = "# of Steps") + theme_bw()
## 5th STEP: 5-minute interval with the max average of steps
averages[which.max(averages$steps), ]
## 6th STEP: IMPUTING MISSING DATA
missing <- is.na(data$steps)
table(missing)
## STRATEGY: Replace them with the mean value at the same interval across the
## whole time period.
na_fill <- function(data, averages) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
averages[averages$interval == interval,]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
data_fill <- data.frame(
steps = na_fill(data, averages),
date = data$date,
interval = data$interval)
str(data_fill)
na_fill <- function(data, averages) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
averages[averages$interval == interval,]$av.steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
data_fill <- data.frame(
steps = na_fill(data, averages),
date = data$date,
interval = data$interval)
str(data_fill)
## 1st STEP: LOAD DATA
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv", sep = ",")
## 2nd STEP: HISTOGRAM OF THE NUMBER OF STEPS EACH DAY
library(ggplot2)
library(data.table)
steps_per_day <- aggregate(steps~date, data, sum)
colnames(steps_per_day) <- c("date", "steps")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
## 3rd STEP: Mean and median number of steps taken each day
stepsmean <- mean(steps_per_day$steps, na.rm = TRUE)
stepsmedian <- median(steps_per_day$steps, na.rm = TRUE)
## 4th STEP: Time series plot of the average number of stpes taken
averages <- aggregate(data$steps, by = list(interval = data$interval),
FUN = mean, na.rm = TRUE)
colnames(averages) <- c("interval", "av.steps")
ggplot(averages, aes(x = interval, y = av.steps)) +
geom_line(color = "darkblue", size = 1) +
labs(title = "Average Daily Activity Pattern", x = "5 sec Interval",
y = "# of Steps") + theme_bw()
## 5th STEP: 5-minute interval with the max average of steps
averages[which.max(averages$av.steps), ]
## 6th STEP: IMPUTING MISSING DATA
missing <- is.na(data$steps)
table(missing)
## STRATEGY: Replace them with the mean value at the same interval across the
## whole time period.
na_fill <- function(data, averages) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
averages[averages$interval == interval,]$av.steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
data_fill <- data.frame(
steps = na_fill(data, averages),
date = data$date,
interval = data$interval)
str(data_fill)
sum(is.na(rdata_fill$steps))
sum(is.na(data_fill$steps))
steps_fill_per_day <- aggregate(steps~date, data_fill, sum)
colnames(steps_fill_per_day) <- c("date", "steps")
ggplot(steps_fill_per_day, aes(x = steps)) +
geom_histogram(fill = "orange", binwidth = 1000) +
labs(title = "Histogram of Steps taken each day",
x = "# of Steps per Day", y = "# of times in a Day (count)") + theme_bw()
